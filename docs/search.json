[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Die Tafelstube",
    "section": "",
    "text": "Katalog zur Ausstellung: Die Tafelstube (Belagerungsszenen des Langen Türkenkriegs an der Decke)\nEin Katalog mit Kunstwerken aus der CbDD-Sammlung. Textteil: 6e73f774-4b7f-4e37-937b-e11cc35c5bc8\nDie Tafelstube (Belagerungsszenen des Langen Türkenkriegs an der Decke) [Raum]\n This work is licensed under a Creative Commons Attribution-NonCommercial-NoDerivs 4.0 International License.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Katalog zur Ausstellung: Die Tafelstube (Belagerungsszenen des Langen Türkenkriegs an der Decke)</span>"
    ]
  },
  {
    "objectID": "tafelstube.html",
    "href": "tafelstube.html",
    "title": "Die Tafelstube",
    "section": "",
    "text": "Code\nfrom datetime import datetime\nimport sys\nimport time\nfrom SPARQLWrapper import SPARQLWrapper, JSON\nimport requests\nfrom PIL import Image\nimport html\n\nendpoint_url = \"https://computational-publishing-service.wikibase.cloud/query/sparql\"\n#where the sparql queries come from\n\nquery_txt = \"\"\"PREFIX cps: &lt;https://computational-publishing-service.wikibase.cloud/entity/&gt;\nPREFIX cpss: &lt;https://computational-publishing-service.wikibase.cloud/entity/statement/&gt;\nPREFIX cpsv: &lt;https://computational-publishing-service.wikibase.cloud/value/&gt;\nPREFIX cpspt: &lt;https://computational-publishing-service.wikibase.cloud/prop/direct/&gt;\nPREFIX cpsp: &lt;https://computational-publishing-service.wikibase.cloud/prop/&gt;\nPREFIX cpsps: &lt;https://computational-publishing-service.wikibase.cloud/prop/statement/&gt;\nPREFIX cpspq: &lt;https://computational-publishing-service.wikibase.cloud/prop/qualifier/&gt;\n\nSELECT ?textItem ?kuratorLabel ?textUrl\nWHERE\n{\n  &lt;placeholder&gt;\n  ?textItem cpsp:P46 ?kuratorStatement. \n  ?kuratorStatement cpsps:P46 ?kuratorItem.   \n  ?kuratorItem rdfs:label ?kuratorLabel.\n  ?textItem cpsp:P57 ?urlstatement. \n  ?urlstatement cpsps:P57 ?textUrl. \n}\"\"\"\n\nquery_img = \"\"\"PREFIX cps: &lt;https://computational-publishing-service.wikibase.cloud/entity/&gt;\nPREFIX cpss: &lt;https://computational-publishing-service.wikibase.cloud/entity/statement/&gt;\nPREFIX cpsv: &lt;https://computational-publishing-service.wikibase.cloud/value/&gt;\nPREFIX cpspt: &lt;https://computational-publishing-service.wikibase.cloud/prop/direct/&gt;\nPREFIX cpsp: &lt;https://computational-publishing-service.wikibase.cloud/prop/&gt;\nPREFIX cpsps: &lt;https://computational-publishing-service.wikibase.cloud/prop/statement/&gt;\nPREFIX cpspq: &lt;https://computational-publishing-service.wikibase.cloud/prop/qualifier/&gt;\n\nSELECT DISTINCT ?itemLabel ?itemDescr ?imgItem ?imgUrl ?publishDate \nWHERE\n{\n  ?imgItem cpsp:P107 ?urlStatement. \n  ?urlStatement cpsps:P107 ?imgUrl. \n  ?imgItem cpsp:P60 ?dateStatement.         \n  ?dateStatement cpsps:P60 ?publishDate.\n  ?imgItem cpsp:P6 ?partOfStatement.\n  ?partOfStatement cpsps:P6 ?partOfItem.\n  &lt;placeholder&gt; \n  SERVICE wikibase:label {\n      bd:serviceParam wikibase:language \"de,en\".\n      ?imgItem rdfs:label ?itemLabel.\n      ?imgItem schema:description ?itemDescr.\n    }\n}\"\"\"\nquery_graph = \"\"\"PREFIX cps: &lt;https://computational-publishing-service.wikibase.cloud/entity/&gt;\nPREFIX cpss: &lt;https://computational-publishing-service.wikibase.cloud/entity/statement/&gt;\nPREFIX cpsv: &lt;https://computational-publishing-service.wikibase.cloud/value/&gt;\nPREFIX cpspt: &lt;https://computational-publishing-service.wikibase.cloud/prop/direct/&gt;\nPREFIX cpsp: &lt;https://computational-publishing-service.wikibase.cloud/prop/&gt;\nPREFIX cpsps: &lt;https://computational-publishing-service.wikibase.cloud/prop/statement/&gt;\nPREFIX cpspq: &lt;https://computational-publishing-service.wikibase.cloud/prop/qualifier/&gt;\n\nSELECT ?x ?y\nWHERE\n{\n  ?a cpsp:P2 ?c.\n  ?c cpsps:P2 ?d.                       #also quasi überall wo sparql ist, muss was angepasst werden\n  ?a rdfs:label ?x.\n  ?d rdfs:label ?y.\n\n}LIMIT 1\"\"\"\n\nquery_graph2 = \"\"\"\nSELECT ?a ?b ?c\nWHERE\n{\n  ?a rdfs:label ?c\n}LIMIT 100\"\"\"\n\n\ndef run_query(endpoint_url, query):\n    user_agent = \"WDQS-example Python/%s.%s\" % (sys.version_info[0], sys.version_info[1])\n    # TODO adjust user agent; see https://w.wiki/CX6\n    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)\n    sparql.setQuery(query)\n    sparql.setMethod(\"POST\") #this NEEDS to be added to get results (not included in the wikibase python example code)\n    sparql.setReturnFormat(JSON)\n    return sparql.query().convert()\n\ndef get_text(textitem_id):\n    q = \"\"\n    if textitem_id:\n        q = query_txt.replace(\"&lt;placeholder&gt;\", \"cps:\"+textitem_id+\" cpsp:P46 ?kuratorStatement.\")\n    else:\n        q = query_txt.replace(\"&lt;placeholder&gt;\",\"\")\n\n    results_txt = run_query(endpoint_url, q)\n    for item in results_txt[\"results\"][\"bindings\"]:\n        # print(item)\n        print('Wikibase link: ' + '[' + item['textItem']['value'] + ']' + '(' + item['textItem']['value'] + ')' + '\\n')\n        print('Kurator: ' + item['kuratorLabel']['value'] + '\\n')\n        headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n        r = requests.get(item['textUrl']['value'], headers=headers, stream=True)\n        text = str(r.content)\n        text = text.replace(\"ä\",\"&auml;\")\n        text = text.replace(\"Ä\",\"&Auml;\")\n        text = text.replace(\"ö\",\"&ouml;\")\n        text = text.replace(\"Ö\",\"&Ouml;\")\n        text = text.replace(\"ü\",\"&uuml;\")\n        text = text.replace(\"Ü\",\"&Uuml;\")\n        text = text.replace(\"ß\",\"&szlig;\")\n        text = text.replace('\\\\n',\"&lt;br&gt;\")\n        text = str(text)\n        text = text.removeprefix(\"b'&lt;!DOCTYPE html&gt;\").removesuffix(\"'\")\n        print(text)\n\ndef get_delay(date):\n    try:\n        date = datetime.datetime.strptime(date, '%a, %d %b %Y %H:%M:%S GMT')\n        timeout = int((date - datetime.datetime.now()).total_seconds())\n    except ValueError:\n        timeout = int(date)\n    return timeout\n\ndef fetch_image_by_url(url, headers):\n    r = requests.get(url, headers=headers, stream=True)\n    if r.status_code == 200:\n        im = Image.open(r.raw)\n        return im\n    if r.status_code == 500:\n        return None\n    if r.status_code == 403:\n        return None\n    if r.status_code == 429:\n        timeout = get_delay(r.headers['retry-after'])\n        print('Timeout {} m {} s'.format(timeout // 60, timeout % 60))\n        time.sleep(timeout)\n        fetch_image_by_url(url, headers)\n\ndef get_img(partOfItem_id):\n    q = \"\"\n    if partOfItem_id:\n        q = query_img.replace(\"&lt;placeholder&gt;\", \"?partOfStatement cpsps:P6 cps:\"+partOfItem_id+\".\")\n    else:\n        q = query_img.replace(\"&lt;placeholder&gt;\",\"\")\n    results_img = run_query(endpoint_url, q)\n    for item in results_img[\"results\"][\"bindings\"]:    \n      #print(item)\n      print('Wikibase link: ' + '[' + item['imgItem']['value'] + ']' + '(' + item['imgItem']['value'] + ')' + '\\n')\n      print('Title: ' + item['itemLabel']['value'] + '\\n')\n      print('Year: ' + item['publishDate']['value'] + '\\n')\n      print('Description: ' + html.unescape(item['itemDescr']['value']) + '\\n')\n\n      # get image from image URL and display resized version\n      image_url=item['imgUrl']['value']\n      headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n      im = fetch_image_by_url(image_url, headers)\n      im.thumbnail((500, 500), Image.Resampling.LANCZOS)\n      display(im)\n      print('\\n\\n')\n\ndef get_graph():\n    import VizKG.visualize as vkg\n    results_graph1 = run_query(endpoint_url, query_graph)\n    #print(results_graph1)\n    #print('---')\n    results_graph2 = run_query(endpoint_url, query_graph2)\n    #print(results_graph2)\n\n    chart = vkg(sparql_query=query_graph2, sparql_service_url=endpoint_url, chart='wordcloud')\n    chart.plot()\n\nHow to use your own text for processing\n\nAdd a new Text item to the wikibase. link to wikibase new item the item should contain the following statements:\n\n\nP57 (external link): link to the html file containing the new text\nP46 (kurator): Item of the curator. you may use an existing item like Q210 (Ulrike seeger) for test purposes\nP53 (license): Item of a license for the text. e.g Q203 (CC BY-NC-ND 4.0 DEED )\nP6 (is part of): set value to Q218 (Schlossanlage Weikersheim)\n\n\ncheck if your new text item occurs in the list of selected text items: Link to wikibase query service\nset parameter of get_text() to the id of your new text item e.g.: get_text(“Q209”)\n\n\nCode\nget_text(\"Q232\")\n#Text zur Tafelstube\n\n\nHow to select images for processing\nImages are selected via the sparql query. The method get_img() is capable of using a wikibase item id as parameter to select images with the property P6 (is part of) linking to the given item id.\n\nselect a valid location id from the query result: Link to wikibase query service\nset parameter of get_img() to the id of your selected location item e.g.: get_img(“Q217”)\n\n\nCode\nget_img(\"Q231\")\n#Bild Tafelstube\n\n\nCode\nget_text(\"Q278\")\n#Belagerungsszenen des Langen Türkenkrieges\n\n\nCode\n#Q252-Q263 = Texte Belagerungsszenen\n\n\nCode\nget_text(\"Q252\")\n#Belagerungsszene 1\n\n\nCode\nget_text(\"Q253\")\n#Belagerungsszene 2\n\n\nCode\nget_text(\"Q254\")\n#Belagerungsszene 3\n\n\nCode\nget_text(\"Q255\")\n#Belagerungsszene 4\n\n\nCode\nget_text(\"Q256\")\n#Belagerungsszene 5\n\n\nCode\nget_text(\"Q257\")\n#Belagerungsszene 6\n\n\nCode\nget_text(\"Q258\")\n#Belagerungsszene 7\n\n\nCode\nget_text(\"Q259\")\n#Belagerungsszene 8\n\n\nCode\nget_text(\"Q260\")\n#Belagerungsszene 9\n\n\nCode\nget_text(\"Q261\")\n#Belagerungsszene 10\n\n\nCode\nget_text(\"Q262\")\n#Belagerungsszene 11\n\n\nCode\nget_text(\"Q263\")\n#Belagerungsszene 12\n\n\nCode\nget_text(\"Q264\")\n#Programm und Synthese der einstigen Tafelstube\n\n\n\nCode\nget_graph()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Die Tafelstube</span>"
    ]
  },
  {
    "objectID": "belagerungsszenen.html",
    "href": "belagerungsszenen.html",
    "title": "``` {.python .cell-code}",
    "section": "",
    "text": "title: “Die Tafelstube” jupyter: python3 code-fold: true execute: echo: true output: asis\n\n:::\n\n\n::: {#cell-1 .cell}\n``` {.python .cell-code}\nfrom datetime import datetime\nimport sys\nimport time\nfrom SPARQLWrapper import SPARQLWrapper, JSON\nimport requests\nfrom PIL import Image\nimport html\n\nendpoint_url = \"https://computational-publishing-service.wikibase.cloud/query/sparql\"\n#where the sparql queries come from\n\nquery_txt = \"\"\"PREFIX cps: &lt;https://computational-publishing-service.wikibase.cloud/entity/&gt;\nPREFIX cpss: &lt;https://computational-publishing-service.wikibase.cloud/entity/statement/&gt;\nPREFIX cpsv: &lt;https://computational-publishing-service.wikibase.cloud/value/&gt;\nPREFIX cpspt: &lt;https://computational-publishing-service.wikibase.cloud/prop/direct/&gt;\nPREFIX cpsp: &lt;https://computational-publishing-service.wikibase.cloud/prop/&gt;\nPREFIX cpsps: &lt;https://computational-publishing-service.wikibase.cloud/prop/statement/&gt;\nPREFIX cpspq: &lt;https://computational-publishing-service.wikibase.cloud/prop/qualifier/&gt;\n\nSELECT ?textItem ?kuratorLabel ?textUrl\nWHERE\n{\n  &lt;placeholder&gt;\n  ?textItem cpsp:P46 ?kuratorStatement. \n  ?kuratorStatement cpsps:P46 ?kuratorItem.   \n  ?kuratorItem rdfs:label ?kuratorLabel.\n  ?textItem cpsp:P57 ?urlstatement. \n  ?urlstatement cpsps:P57 ?textUrl. \n}\"\"\"\n\nquery_img = \"\"\"PREFIX cps: &lt;https://computational-publishing-service.wikibase.cloud/entity/&gt;\nPREFIX cpss: &lt;https://computational-publishing-service.wikibase.cloud/entity/statement/&gt;\nPREFIX cpsv: &lt;https://computational-publishing-service.wikibase.cloud/value/&gt;\nPREFIX cpspt: &lt;https://computational-publishing-service.wikibase.cloud/prop/direct/&gt;\nPREFIX cpsp: &lt;https://computational-publishing-service.wikibase.cloud/prop/&gt;\nPREFIX cpsps: &lt;https://computational-publishing-service.wikibase.cloud/prop/statement/&gt;\nPREFIX cpspq: &lt;https://computational-publishing-service.wikibase.cloud/prop/qualifier/&gt;\n\nSELECT DISTINCT ?itemLabel ?itemDescr ?imgItem ?imgUrl ?publishDate \nWHERE\n{\n  ?imgItem cpsp:P107 ?urlStatement. \n  ?urlStatement cpsps:P107 ?imgUrl. \n  ?imgItem cpsp:P60 ?dateStatement.         \n  ?dateStatement cpsps:P60 ?publishDate.\n  ?imgItem cpsp:P6 ?partOfStatement.\n  ?partOfStatement cpsps:P6 ?partOfItem.\n  &lt;placeholder&gt; \n  SERVICE wikibase:label {\n      bd:serviceParam wikibase:language \"de,en\".\n      ?imgItem rdfs:label ?itemLabel.\n      ?imgItem schema:description ?itemDescr.\n    }\n}\"\"\"\nquery_graph = \"\"\"PREFIX cps: &lt;https://computational-publishing-service.wikibase.cloud/entity/&gt;\nPREFIX cpss: &lt;https://computational-publishing-service.wikibase.cloud/entity/statement/&gt;\nPREFIX cpsv: &lt;https://computational-publishing-service.wikibase.cloud/value/&gt;\nPREFIX cpspt: &lt;https://computational-publishing-service.wikibase.cloud/prop/direct/&gt;\nPREFIX cpsp: &lt;https://computational-publishing-service.wikibase.cloud/prop/&gt;\nPREFIX cpsps: &lt;https://computational-publishing-service.wikibase.cloud/prop/statement/&gt;\nPREFIX cpspq: &lt;https://computational-publishing-service.wikibase.cloud/prop/qualifier/&gt;\n\nSELECT ?x ?y\nWHERE\n{\n  ?a cpsp:P2 ?c.\n  ?c cpsps:P2 ?d.                       #also quasi überall wo sparql ist, muss was angepasst werden\n  ?a rdfs:label ?x.\n  ?d rdfs:label ?y.\n\n}LIMIT 1\"\"\"\n\nquery_graph2 = \"\"\"\nSELECT ?a ?b ?c\nWHERE\n{\n  ?a rdfs:label ?c\n}LIMIT 100\"\"\"\n\n\ndef run_query(endpoint_url, query):\n    user_agent = \"WDQS-example Python/%s.%s\" % (sys.version_info[0], sys.version_info[1])\n    # TODO adjust user agent; see https://w.wiki/CX6\n    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)\n    sparql.setQuery(query)\n    sparql.setMethod(\"POST\") #this NEEDS to be added to get results (not included in the wikibase python example code)\n    sparql.setReturnFormat(JSON)\n    return sparql.query().convert()\n\ndef get_text(textitem_id):\n    q = \"\"\n    if textitem_id:\n        q = query_txt.replace(\"&lt;placeholder&gt;\", \"cps:\"+textitem_id+\" cpsp:P46 ?kuratorStatement.\")\n    else:\n        q = query_txt.replace(\"&lt;placeholder&gt;\",\"\")\n\n    results_txt = run_query(endpoint_url, q)\n    for item in results_txt[\"results\"][\"bindings\"]:\n        # print(item)\n        print('Wikibase link: ' + '[' + item['textItem']['value'] + ']' + '(' + item['textItem']['value'] + ')' + '\\n')\n        print('Kurator: ' + item['kuratorLabel']['value'] + '\\n')\n        headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n        r = requests.get(item['textUrl']['value'], headers=headers, stream=True)\n        text = str(r.content)\n        text = text.replace(\"ä\",\"&auml;\")\n        text = text.replace(\"Ä\",\"&Auml;\")\n        text = text.replace(\"ö\",\"&ouml;\")\n        text = text.replace(\"Ö\",\"&Ouml;\")\n        text = text.replace(\"ü\",\"&uuml;\")\n        text = text.replace(\"Ü\",\"&Uuml;\")\n        text = text.replace(\"ß\",\"&szlig;\")\n        text = text.replace('\\\\n',\"&lt;br&gt;\")\n        text = str(text)\n        text = text.removeprefix(\"b'&lt;!DOCTYPE html&gt;\").removesuffix(\"'\")\n        print(text)\n\ndef get_delay(date):\n    try:\n        date = datetime.datetime.strptime(date, '%a, %d %b %Y %H:%M:%S GMT')\n        timeout = int((date - datetime.datetime.now()).total_seconds())\n    except ValueError:\n        timeout = int(date)\n    return timeout\n\ndef fetch_image_by_url(url, headers):\n    r = requests.get(url, headers=headers, stream=True)\n    if r.status_code == 200:\n        im = Image.open(r.raw)\n        return im\n    if r.status_code == 500:\n        return None\n    if r.status_code == 403:\n        return None\n    if r.status_code == 429:\n        timeout = get_delay(r.headers['retry-after'])\n        print('Timeout {} m {} s'.format(timeout // 60, timeout % 60))\n        time.sleep(timeout)\n        fetch_image_by_url(url, headers)\n\ndef get_img(partOfItem_id):\n    q = \"\"\n    if partOfItem_id:\n        q = query_img.replace(\"&lt;placeholder&gt;\", \"?partOfStatement cpsps:P6 cps:\"+partOfItem_id+\".\")\n    else:\n        q = query_img.replace(\"&lt;placeholder&gt;\",\"\")\n    results_img = run_query(endpoint_url, q)\n    for item in results_img[\"results\"][\"bindings\"]:    \n      #print(item)\n      print('Wikibase link: ' + '[' + item['imgItem']['value'] + ']' + '(' + item['imgItem']['value'] + ')' + '\\n')\n      print('Title: ' + item['itemLabel']['value'] + '\\n')\n      print('Year: ' + item['publishDate']['value'] + '\\n')\n      print('Description: ' + html.unescape(item['itemDescr']['value']) + '\\n')\n\n      # get image from image URL and display resized version\n      image_url=item['imgUrl']['value']\n      headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n      im = fetch_image_by_url(image_url, headers)\n      im.thumbnail((500, 500), Image.Resampling.LANCZOS)\n      display(im)\n      print('\\n\\n')\n\ndef get_graph():\n    import VizKG.visualize as vkg\n    results_graph1 = run_query(endpoint_url, query_graph)\n    #print(results_graph1)\n    #print('---')\n    results_graph2 = run_query(endpoint_url, query_graph2)\n    #print(results_graph2)\n\n    chart = vkg(sparql_query=query_graph2, sparql_service_url=endpoint_url, chart='wordcloud')\n    chart.plot()\n\n\n\nget_text(\"Q278\")\n#Belagerungsszenen des Langen Türkenkrieges",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>belagerungsszenen.html</span>"
    ]
  }
]